/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace INFTGate {
  export type StakedNFTStruct = {
    tokenId: BigNumberish;
    stakedAt: BigNumberish;
  };

  export type StakedNFTStructOutput = [tokenId: bigint, stakedAt: bigint] & {
    tokenId: bigint;
    stakedAt: bigint;
  };
}

export interface NFTGateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addDelegate"
      | "getMinimumStakeDuration"
      | "getNFTContractAddress"
      | "getRegisteredEmail"
      | "getStakedNFT"
      | "initialize"
      | "isAllowed"
      | "isDelegateOf"
      | "isEligible"
      | "owner"
      | "registerEmail"
      | "removeDelegate"
      | "renounceOwnership"
      | "setMinimumStakeDuration"
      | "stakeNFT"
      | "transferOwnership"
      | "unstakeNFT"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DelegateAdded"
      | "DelegateRemoved"
      | "EmailRegistered"
      | "Initialized"
      | "NFTStaked"
      | "NFTUnstaked"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addDelegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumStakeDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredEmail",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedNFT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDelegateOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isEligible",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerEmail",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDelegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumStakeDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeNFT",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumStakeDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredEmail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDelegateOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isEligible", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerEmail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumStakeDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstakeNFT", data: BytesLike): Result;
}

export namespace DelegateAddedEvent {
  export type InputTuple = [owner: AddressLike, delegate: AddressLike];
  export type OutputTuple = [owner: string, delegate: string];
  export interface OutputObject {
    owner: string;
    delegate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateRemovedEvent {
  export type InputTuple = [owner: AddressLike, delegate: AddressLike];
  export type OutputTuple = [owner: string, delegate: string];
  export interface OutputObject {
    owner: string;
    delegate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmailRegisteredEvent {
  export type InputTuple = [user: AddressLike, email: string];
  export type OutputTuple = [user: string, email: string];
  export interface OutputObject {
    user: string;
    email: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTStakedEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenId: BigNumberish,
    stakedAt: BigNumberish
  ];
  export type OutputTuple = [user: string, tokenId: bigint, stakedAt: bigint];
  export interface OutputObject {
    user: string;
    tokenId: bigint;
    stakedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTUnstakedEvent {
  export type InputTuple = [user: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [user: string, tokenId: bigint];
  export interface OutputObject {
    user: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NFTGate extends BaseContract {
  connect(runner?: ContractRunner | null): NFTGate;
  waitForDeployment(): Promise<this>;

  interface: NFTGateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addDelegate: TypedContractMethod<
    [delegate: AddressLike],
    [void],
    "nonpayable"
  >;

  getMinimumStakeDuration: TypedContractMethod<[], [bigint], "view">;

  getNFTContractAddress: TypedContractMethod<[], [string], "view">;

  getRegisteredEmail: TypedContractMethod<
    [user: AddressLike],
    [string],
    "view"
  >;

  getStakedNFT: TypedContractMethod<
    [user: AddressLike],
    [INFTGate.StakedNFTStructOutput],
    "view"
  >;

  initialize: TypedContractMethod<
    [minimumStakeDuration: BigNumberish, nftAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  isAllowed: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  isDelegateOf: TypedContractMethod<
    [owner: AddressLike, delegate: AddressLike],
    [boolean],
    "view"
  >;

  isEligible: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerEmail: TypedContractMethod<
    [email: string, account: AddressLike],
    [void],
    "nonpayable"
  >;

  removeDelegate: TypedContractMethod<
    [delegate: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setMinimumStakeDuration: TypedContractMethod<
    [duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  stakeNFT: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unstakeNFT: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addDelegate"
  ): TypedContractMethod<[delegate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getMinimumStakeDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNFTContractAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRegisteredEmail"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getStakedNFT"
  ): TypedContractMethod<
    [user: AddressLike],
    [INFTGate.StakedNFTStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [minimumStakeDuration: BigNumberish, nftAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAllowed"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isDelegateOf"
  ): TypedContractMethod<
    [owner: AddressLike, delegate: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isEligible"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerEmail"
  ): TypedContractMethod<
    [email: string, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeDelegate"
  ): TypedContractMethod<[delegate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinimumStakeDuration"
  ): TypedContractMethod<[duration: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakeNFT"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstakeNFT"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "DelegateAdded"
  ): TypedContractEvent<
    DelegateAddedEvent.InputTuple,
    DelegateAddedEvent.OutputTuple,
    DelegateAddedEvent.OutputObject
  >;
  getEvent(
    key: "DelegateRemoved"
  ): TypedContractEvent<
    DelegateRemovedEvent.InputTuple,
    DelegateRemovedEvent.OutputTuple,
    DelegateRemovedEvent.OutputObject
  >;
  getEvent(
    key: "EmailRegistered"
  ): TypedContractEvent<
    EmailRegisteredEvent.InputTuple,
    EmailRegisteredEvent.OutputTuple,
    EmailRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NFTStaked"
  ): TypedContractEvent<
    NFTStakedEvent.InputTuple,
    NFTStakedEvent.OutputTuple,
    NFTStakedEvent.OutputObject
  >;
  getEvent(
    key: "NFTUnstaked"
  ): TypedContractEvent<
    NFTUnstakedEvent.InputTuple,
    NFTUnstakedEvent.OutputTuple,
    NFTUnstakedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "DelegateAdded(address,address)": TypedContractEvent<
      DelegateAddedEvent.InputTuple,
      DelegateAddedEvent.OutputTuple,
      DelegateAddedEvent.OutputObject
    >;
    DelegateAdded: TypedContractEvent<
      DelegateAddedEvent.InputTuple,
      DelegateAddedEvent.OutputTuple,
      DelegateAddedEvent.OutputObject
    >;

    "DelegateRemoved(address,address)": TypedContractEvent<
      DelegateRemovedEvent.InputTuple,
      DelegateRemovedEvent.OutputTuple,
      DelegateRemovedEvent.OutputObject
    >;
    DelegateRemoved: TypedContractEvent<
      DelegateRemovedEvent.InputTuple,
      DelegateRemovedEvent.OutputTuple,
      DelegateRemovedEvent.OutputObject
    >;

    "EmailRegistered(address,string)": TypedContractEvent<
      EmailRegisteredEvent.InputTuple,
      EmailRegisteredEvent.OutputTuple,
      EmailRegisteredEvent.OutputObject
    >;
    EmailRegistered: TypedContractEvent<
      EmailRegisteredEvent.InputTuple,
      EmailRegisteredEvent.OutputTuple,
      EmailRegisteredEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NFTStaked(address,uint256,uint256)": TypedContractEvent<
      NFTStakedEvent.InputTuple,
      NFTStakedEvent.OutputTuple,
      NFTStakedEvent.OutputObject
    >;
    NFTStaked: TypedContractEvent<
      NFTStakedEvent.InputTuple,
      NFTStakedEvent.OutputTuple,
      NFTStakedEvent.OutputObject
    >;

    "NFTUnstaked(address,uint256)": TypedContractEvent<
      NFTUnstakedEvent.InputTuple,
      NFTUnstakedEvent.OutputTuple,
      NFTUnstakedEvent.OutputObject
    >;
    NFTUnstaked: TypedContractEvent<
      NFTUnstakedEvent.InputTuple,
      NFTUnstakedEvent.OutputTuple,
      NFTUnstakedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
